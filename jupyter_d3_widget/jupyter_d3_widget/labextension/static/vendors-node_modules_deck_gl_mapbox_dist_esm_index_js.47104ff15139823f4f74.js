"use strict";
(self["webpackChunkjupyter_d3_widget"] = self["webpackChunkjupyter_d3_widget"] || []).push([["vendors-node_modules_deck_gl_mapbox_dist_esm_index_js"],{

/***/ "./node_modules/@deck.gl/mapbox/dist/esm/deck-utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/@deck.gl/mapbox/dist/esm/deck-utils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addLayer": () => (/* binding */ addLayer),
/* harmony export */   "drawLayer": () => (/* binding */ drawLayer),
/* harmony export */   "getDeckInstance": () => (/* binding */ getDeckInstance),
/* harmony export */   "getInterleavedProps": () => (/* binding */ getInterleavedProps),
/* harmony export */   "getViewState": () => (/* binding */ getViewState),
/* harmony export */   "removeLayer": () => (/* binding */ removeLayer),
/* harmony export */   "updateLayer": () => (/* binding */ updateLayer)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deck.gl/core */ "webpack/sharing/consume/default/@deck.gl/core/@deck.gl/core?2e76");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_deck_gl_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @math.gl/web-mercator */ "./node_modules/@math.gl/web-mercator/dist/esm/index.js");


const TILE_SIZE = 512;
const DEGREES_TO_RADIANS = Math.PI / 180;
function getDeckInstance({
  map,
  gl,
  deck
}) {
  if (map.__deck) {
    return map.__deck;
  }

  const customRender = deck === null || deck === void 0 ? void 0 : deck.props._customRender;
  const onLoad = deck === null || deck === void 0 ? void 0 : deck.props.onLoad;
  const deckProps = getInterleavedProps({ ...(deck === null || deck === void 0 ? void 0 : deck.props),
    _customRender: () => {
      map.triggerRepaint();
      customRender === null || customRender === void 0 ? void 0 : customRender('');
    }
  });
  let deckInstance;

  if (!deck || deck.props.gl === gl) {
    Object.assign(deckProps, {
      gl,
      width: null,
      height: null,
      touchAction: 'unset',
      viewState: getViewState(map)
    });

    if (deck !== null && deck !== void 0 && deck.isInitialized) {
      watchMapMove(deck, map);
    } else {
      deckProps.onLoad = () => {
        onLoad === null || onLoad === void 0 ? void 0 : onLoad();
        watchMapMove(deckInstance, map);
      };
    }
  }

  if (deck) {
    deckInstance = deck;
    deck.setProps(deckProps);
    deck.userData.isExternal = true;
  } else {
    deckInstance = new _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__.Deck(deckProps);
    map.on('remove', () => {
      deckInstance.finalize();
      map.__deck = null;
    });
  }

  deckInstance.userData.mapboxLayers = new Set();
  map.__deck = deckInstance;
  map.on('render', () => {
    if (deckInstance.isInitialized) afterRender(deckInstance, map);
  });
  return deckInstance;
}

function watchMapMove(deck, map) {
  const _handleMapMove = () => {
    if (deck.isInitialized) {
      onMapMove(deck, map);
    } else {
      map.off('move', _handleMapMove);
    }
  };

  map.on('move', _handleMapMove);
}

function getInterleavedProps(currProps) {
  const nextProps = { ...currProps,
    parameters: {
      depthMask: true,
      depthTest: true,
      blend: true,
      blendFunc: [770, 771, 1, 771],
      polygonOffsetFill: true,
      depthFunc: 515,
      blendEquation: 32774,
      ...currProps.parameters
    },
    views: currProps.views || [new _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__.MapView({
      id: 'mapbox'
    })]
  };
  return nextProps;
}
function addLayer(deck, layer) {
  deck.userData.mapboxLayers.add(layer);
  updateLayers(deck);
}
function removeLayer(deck, layer) {
  deck.userData.mapboxLayers.delete(layer);
  updateLayers(deck);
}
function updateLayer(deck, layer) {
  updateLayers(deck);
}
function drawLayer(deck, map, layer) {
  let {
    currentViewport
  } = deck.userData;
  let clearStack = false;

  if (!currentViewport) {
    currentViewport = getViewport(deck, map, true);
    deck.userData.currentViewport = currentViewport;
    clearStack = true;
  }

  if (!deck.isInitialized) {
    return;
  }

  deck._drawLayers('mapbox-repaint', {
    viewports: [currentViewport],
    layerFilter: ({
      layer: deckLayer
    }) => layer.id === deckLayer.id,
    clearStack,
    clearCanvas: false
  });
}
function getViewState(map) {
  var _map$getTerrain;

  const {
    lng,
    lat
  } = map.getCenter();
  const viewState = {
    longitude: (lng + 540) % 360 - 180,
    latitude: lat,
    zoom: map.getZoom(),
    bearing: map.getBearing(),
    pitch: map.getPitch(),
    padding: map.getPadding(),
    repeat: map.getRenderWorldCopies()
  };

  if ((_map$getTerrain = map.getTerrain) !== null && _map$getTerrain !== void 0 && _map$getTerrain.call(map)) {
    centerCameraOnTerrain(map, viewState);
  }

  return viewState;
}

function centerCameraOnTerrain(map, viewState) {
  if (map.getFreeCameraOptions) {
    const {
      position
    } = map.getFreeCameraOptions();

    if (!position || position.z === undefined) {
      return;
    }

    const height = map.transform.height;
    const {
      longitude,
      latitude,
      pitch
    } = viewState;
    const cameraX = position.x * TILE_SIZE;
    const cameraY = (1 - position.y) * TILE_SIZE;
    const cameraZ = position.z * TILE_SIZE;
    const center = (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_1__.lngLatToWorld)([longitude, latitude]);
    const dx = cameraX - center[0];
    const dy = cameraY - center[1];
    const cameraToCenterDistanceGround = Math.sqrt(dx * dx + dy * dy);
    const pitchRadians = pitch * DEGREES_TO_RADIANS;
    const altitudePixels = 1.5 * height;
    const scale = pitchRadians < 0.001 ? altitudePixels * Math.cos(pitchRadians) / cameraZ : altitudePixels * Math.sin(pitchRadians) / cameraToCenterDistanceGround;
    viewState.zoom = Math.log2(scale);
    const cameraZFromSurface = altitudePixels * Math.cos(pitchRadians) / scale;
    const surfaceElevation = cameraZ - cameraZFromSurface;
    viewState.position = [0, 0, surfaceElevation / (0,_math_gl_web_mercator__WEBPACK_IMPORTED_MODULE_1__.unitsPerMeter)(latitude)];
  } else if (typeof map.transform.elevation === 'number') {
    viewState.position = [0, 0, map.transform.elevation];
  }
}

function getViewport(deck, map, useMapboxProjection = true) {
  return new _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__.WebMercatorViewport({
    id: 'mapbox',
    x: 0,
    y: 0,
    width: deck.width,
    height: deck.height,
    ...getViewState(map),
    nearZMultiplier: useMapboxProjection ? 0.02 : 0.1
  });
}

function afterRender(deck, map) {
  const {
    mapboxLayers,
    isExternal
  } = deck.userData;

  if (isExternal) {
    const mapboxLayerIds = Array.from(mapboxLayers, layer => layer.id);
    const deckLayers = (0,_deck_gl_core__WEBPACK_IMPORTED_MODULE_0__._flatten)(deck.props.layers, Boolean);
    const hasNonMapboxLayers = deckLayers.some(layer => layer && !mapboxLayerIds.includes(layer.id));
    let viewports = deck.getViewports();
    const mapboxViewportIdx = viewports.findIndex(vp => vp.id === 'mapbox');
    const hasNonMapboxViews = viewports.length > 1 || mapboxViewportIdx < 0;

    if (hasNonMapboxLayers || hasNonMapboxViews) {
      if (mapboxViewportIdx >= 0) {
        viewports = viewports.slice();
        viewports[mapboxViewportIdx] = getViewport(deck, map, false);
      }

      deck._drawLayers('mapbox-repaint', {
        viewports,
        layerFilter: params => (!deck.props.layerFilter || deck.props.layerFilter(params)) && (params.viewport.id !== 'mapbox' || !mapboxLayerIds.includes(params.layer.id)),
        clearCanvas: false
      });
    }
  }

  deck.userData.currentViewport = null;
}

function onMapMove(deck, map) {
  deck.setProps({
    viewState: getViewState(map)
  });
  deck.needsRedraw({
    clearRedrawFlags: true
  });
}

function updateLayers(deck) {
  if (deck.userData.isExternal) {
    return;
  }

  const layers = [];
  deck.userData.mapboxLayers.forEach(deckLayer => {
    const LayerType = deckLayer.props.type;
    const layer = new LayerType(deckLayer.props);
    layers.push(layer);
  });
  deck.setProps({
    layers
  });
}


/***/ }),

/***/ "./node_modules/@deck.gl/mapbox/dist/esm/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@deck.gl/mapbox/dist/esm/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MapboxLayer": () => (/* reexport safe */ _mapbox_layer__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   "MapboxOverlay": () => (/* reexport safe */ _mapbox_overlay__WEBPACK_IMPORTED_MODULE_1__["default"])
/* harmony export */ });
/* harmony import */ var _mapbox_layer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mapbox-layer */ "./node_modules/@deck.gl/mapbox/dist/esm/mapbox-layer.js");
/* harmony import */ var _mapbox_overlay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mapbox-overlay */ "./node_modules/@deck.gl/mapbox/dist/esm/mapbox-overlay.js");




/***/ }),

/***/ "./node_modules/@deck.gl/mapbox/dist/esm/mapbox-layer.js":
/*!***************************************************************!*\
  !*** ./node_modules/@deck.gl/mapbox/dist/esm/mapbox-layer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MapboxLayer)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _deck_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deck-utils */ "./node_modules/@deck.gl/mapbox/dist/esm/deck-utils.js");


class MapboxLayer {
  constructor(props) {
    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "id", void 0);

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "type", void 0);

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "renderingMode", void 0);

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "map", void 0);

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "deck", void 0);

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "props", void 0);

    if (!props.id) {
      throw new Error('Layer must have an unique id');
    }

    this.id = props.id;
    this.type = 'custom';
    this.renderingMode = props.renderingMode || '3d';
    this.map = null;
    this.deck = null;
    this.props = props;
  }

  onAdd(map, gl) {
    this.map = map;
    this.deck = (0,_deck_utils__WEBPACK_IMPORTED_MODULE_1__.getDeckInstance)({
      map,
      gl,
      deck: this.props.deck
    });
    (0,_deck_utils__WEBPACK_IMPORTED_MODULE_1__.addLayer)(this.deck, this);
  }

  onRemove() {
    if (this.deck) {
      (0,_deck_utils__WEBPACK_IMPORTED_MODULE_1__.removeLayer)(this.deck, this);
    }
  }

  setProps(props) {
    Object.assign(this.props, props, {
      id: this.id
    });

    if (this.deck) {
      (0,_deck_utils__WEBPACK_IMPORTED_MODULE_1__.updateLayer)(this.deck, this);
    }
  }

  render() {
    (0,_deck_utils__WEBPACK_IMPORTED_MODULE_1__.drawLayer)(this.deck, this.map, this);
  }

}


/***/ }),

/***/ "./node_modules/@deck.gl/mapbox/dist/esm/mapbox-overlay.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@deck.gl/mapbox/dist/esm/mapbox-overlay.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MapboxOverlay)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @deck.gl/core */ "webpack/sharing/consume/default/@deck.gl/core/@deck.gl/core?2e76");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_deck_gl_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _deck_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./deck-utils */ "./node_modules/@deck.gl/mapbox/dist/esm/deck-utils.js");
/* harmony import */ var _resolve_layers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resolve-layers */ "./node_modules/@deck.gl/mapbox/dist/esm/resolve-layers.js");




class MapboxOverlay {
  constructor(props) {
    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_props", void 0);

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_deck", void 0);

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_map", void 0);

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_container", void 0);

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_interleaved", void 0);

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_lastMouseDownPoint", void 0);

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_handleStyleChange", () => {
      (0,_resolve_layers__WEBPACK_IMPORTED_MODULE_2__.resolveLayers)(this._map, this._deck, this._props.layers, this._props.layers);
    });

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_updateContainerSize", () => {
      if (this._map && this._container) {
        const {
          clientWidth,
          clientHeight
        } = this._map.getContainer();

        Object.assign(this._container.style, {
          width: "".concat(clientWidth, "px"),
          height: "".concat(clientHeight, "px")
        });
      }
    });

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_updateViewState", () => {
      const deck = this._deck;

      if (deck) {
        deck.setProps({
          viewState: (0,_deck_utils__WEBPACK_IMPORTED_MODULE_3__.getViewState)(this._map)
        });

        if (deck.isInitialized) {
          deck.redraw();
        }
      }
    });

    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_handleMouseEvent", event => {
      const deck = this._deck;

      if (!deck || !deck.isInitialized) {
        return;
      }

      const mockEvent = {
        type: event.type,
        offsetCenter: event.point,
        srcEvent: event
      };
      const lastDown = this._lastMouseDownPoint;

      if (!event.point && lastDown) {
        mockEvent.deltaX = event.originalEvent.clientX - lastDown.clientX;
        mockEvent.deltaY = event.originalEvent.clientY - lastDown.clientY;
        mockEvent.offsetCenter = {
          x: lastDown.x + mockEvent.deltaX,
          y: lastDown.y + mockEvent.deltaY
        };
      }

      switch (mockEvent.type) {
        case 'mousedown':
          deck._onPointerDown(mockEvent);

          this._lastMouseDownPoint = { ...event.point,
            clientX: event.originalEvent.clientX,
            clientY: event.originalEvent.clientY
          };
          break;

        case 'dragstart':
          mockEvent.type = 'panstart';

          deck._onEvent(mockEvent);

          break;

        case 'drag':
          mockEvent.type = 'panmove';

          deck._onEvent(mockEvent);

          break;

        case 'dragend':
          mockEvent.type = 'panend';

          deck._onEvent(mockEvent);

          break;

        case 'click':
          mockEvent.tapCount = 1;

          deck._onEvent(mockEvent);

          break;

        case 'dblclick':
          mockEvent.type = 'click';
          mockEvent.tapCount = 2;

          deck._onEvent(mockEvent);

          break;

        case 'mousemove':
          mockEvent.type = 'pointermove';

          deck._onPointerMove(mockEvent);

          break;

        case 'mouseout':
          mockEvent.type = 'pointerleave';

          deck._onPointerMove(mockEvent);

          break;

        default:
          return;
      }
    });

    const {
      interleaved = false,
      ...otherProps
    } = props;
    this._interleaved = interleaved;
    this._props = otherProps;
  }

  setProps(props) {
    if (this._interleaved && props.layers) {
      (0,_resolve_layers__WEBPACK_IMPORTED_MODULE_2__.resolveLayers)(this._map, this._deck, this._props.layers, props.layers);
    }

    Object.assign(this._props, props);

    if (this._deck) {
      this._deck.setProps(this._interleaved ? (0,_deck_utils__WEBPACK_IMPORTED_MODULE_3__.getInterleavedProps)(this._props) : this._props);
    }
  }

  onAdd(map) {
    this._map = map;
    return this._interleaved ? this._onAddInterleaved(map) : this._onAddOverlaid(map);
  }

  _onAddOverlaid(map) {
    const container = document.createElement('div');
    Object.assign(container.style, {
      position: 'absolute',
      left: 0,
      top: 0,
      pointerEvents: 'none'
    });
    this._container = container;
    this._deck = new _deck_gl_core__WEBPACK_IMPORTED_MODULE_1__.Deck({ ...this._props,
      parent: container,
      viewState: (0,_deck_utils__WEBPACK_IMPORTED_MODULE_3__.getViewState)(map)
    });
    map.on('resize', this._updateContainerSize);
    map.on('render', this._updateViewState);
    map.on('mousedown', this._handleMouseEvent);
    map.on('dragstart', this._handleMouseEvent);
    map.on('drag', this._handleMouseEvent);
    map.on('dragend', this._handleMouseEvent);
    map.on('mousemove', this._handleMouseEvent);
    map.on('mouseout', this._handleMouseEvent);
    map.on('click', this._handleMouseEvent);
    map.on('dblclick', this._handleMouseEvent);

    this._updateContainerSize();

    return container;
  }

  _onAddInterleaved(map) {
    this._deck = (0,_deck_utils__WEBPACK_IMPORTED_MODULE_3__.getDeckInstance)({
      map,
      gl: map.painter.context.gl,
      deck: new _deck_gl_core__WEBPACK_IMPORTED_MODULE_1__.Deck({ ...this._props,
        gl: map.painter.context.gl
      })
    });
    map.on('styledata', this._handleStyleChange);
    (0,_resolve_layers__WEBPACK_IMPORTED_MODULE_2__.resolveLayers)(map, this._deck, [], this._props.layers);
    return document.createElement('div');
  }

  onRemove() {
    var _this$_deck;

    const map = this._map;

    if (map) {
      if (this._interleaved) {
        this._onRemoveInterleaved(map);
      } else {
        this._onRemoveOverlaid(map);
      }
    }

    (_this$_deck = this._deck) === null || _this$_deck === void 0 ? void 0 : _this$_deck.finalize();
    this._deck = undefined;
    this._map = undefined;
    this._container = undefined;
  }

  _onRemoveOverlaid(map) {
    map.off('resize', this._updateContainerSize);
    map.off('render', this._updateViewState);
    map.off('mousedown', this._handleMouseEvent);
    map.off('dragstart', this._handleMouseEvent);
    map.off('drag', this._handleMouseEvent);
    map.off('dragend', this._handleMouseEvent);
    map.off('mousemove', this._handleMouseEvent);
    map.off('mouseout', this._handleMouseEvent);
    map.off('click', this._handleMouseEvent);
    map.off('dblclick', this._handleMouseEvent);
  }

  _onRemoveInterleaved(map) {
    map.off('styledata', this._handleStyleChange);
    (0,_resolve_layers__WEBPACK_IMPORTED_MODULE_2__.resolveLayers)(map, this._deck, this._props.layers, []);
  }

  getDefaultPosition() {
    return 'top-left';
  }

  pickObject(params) {
    (0,_deck_gl_core__WEBPACK_IMPORTED_MODULE_1__.assert)(this._deck);
    return this._deck.pickObject(params);
  }

  pickMultipleObjects(params) {
    (0,_deck_gl_core__WEBPACK_IMPORTED_MODULE_1__.assert)(this._deck);
    return this._deck.pickMultipleObjects(params);
  }

  pickObjects(params) {
    (0,_deck_gl_core__WEBPACK_IMPORTED_MODULE_1__.assert)(this._deck);
    return this._deck.pickObjects(params);
  }

  finalize() {
    if (this._map) {
      this._map.removeControl(this);
    }
  }

}


/***/ }),

/***/ "./node_modules/@deck.gl/mapbox/dist/esm/resolve-layers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@deck.gl/mapbox/dist/esm/resolve-layers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolveLayers": () => (/* binding */ resolveLayers)
/* harmony export */ });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deck.gl/core */ "webpack/sharing/consume/default/@deck.gl/core/@deck.gl/core?2e76");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_deck_gl_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _mapbox_layer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mapbox-layer */ "./node_modules/@deck.gl/mapbox/dist/esm/mapbox-layer.js");


const UNDEFINED_BEFORE_ID = '__UNDEFINED__';
function resolveLayers(map, deck, oldLayers, newLayers) {
  if (!map || !deck || !map.style || !map.style._loaded) {
    return;
  }

  const layers = (0,_deck_gl_core__WEBPACK_IMPORTED_MODULE_0__._flatten)(newLayers, Boolean);

  if (oldLayers !== newLayers) {
    const prevLayers = (0,_deck_gl_core__WEBPACK_IMPORTED_MODULE_0__._flatten)(oldLayers, Boolean);
    const prevLayerIds = new Set(prevLayers.map(l => l.id));

    for (const layer of layers) {
      prevLayerIds.delete(layer.id);
    }

    for (const id of prevLayerIds) {
      if (map.getLayer(id)) {
        map.removeLayer(id);
      }
    }
  }

  for (const layer of layers) {
    const mapboxLayer = map.getLayer(layer.id);

    if (mapboxLayer) {
      mapboxLayer.implementation.setProps(layer.props);
    } else {
      map.addLayer(new _mapbox_layer__WEBPACK_IMPORTED_MODULE_1__["default"]({
        id: layer.id,
        deck
      }), layer.props.beforeId);
    }
  }

  const mapLayers = map.style._order;
  const layerGroups = {};

  for (const layer of layers) {
    let {
      beforeId
    } = layer.props;

    if (!beforeId || !mapLayers.includes(beforeId)) {
      beforeId = UNDEFINED_BEFORE_ID;
    }

    layerGroups[beforeId] = layerGroups[beforeId] || [];
    layerGroups[beforeId].push(layer.id);
  }

  for (const beforeId in layerGroups) {
    const layerGroup = layerGroups[beforeId];
    let lastLayerIndex = beforeId === UNDEFINED_BEFORE_ID ? mapLayers.length : mapLayers.indexOf(beforeId);
    let lastLayerId = beforeId === UNDEFINED_BEFORE_ID ? undefined : beforeId;

    for (let i = layerGroup.length - 1; i >= 0; i--) {
      const layerId = layerGroup[i];
      const layerIndex = mapLayers.indexOf(layerId);

      if (layerIndex !== lastLayerIndex - 1) {
        map.moveLayer(layerId, lastLayerId);

        if (layerIndex > lastLayerIndex) {
          lastLayerIndex++;
        }
      }

      lastLayerIndex--;
      lastLayerId = layerId;
    }
  }
}


/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_deck_gl_mapbox_dist_esm_index_js.47104ff15139823f4f74.js.map